apply plugin: 'application'
apply plugin: 'maven'

repositories {
    maven {
        url 'http://repo.gradle.org/gradle/libs-releases-local'
    }
    maven {
        url "http://dl.bintray.com/kdabir/maven"
    }

}

sourceSets {
    main.groovy.srcDir 'src'
    main.resources.srcDir 'resources'
    test.groovy.srcDir 'test'
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion",
            'org.apache.ant:ant:1.8.4',     // required for AntBuilder
            'commons-cli:commons-cli:1.2',   // required for CliBuilder
            "org.gradle:gradle-tooling-api:${gradle.gradleVersion}",
            project(":fs"),
            project(":generators")

    runtime 'org.slf4j:slf4j-nop:1.7.2'

    testCompile 'junit:junit:4.10',
            'directree:directree:0.1',
            project(path: ':fs', configuration: 'tests')
}

mainClassName = "glide.runner.CLI"

/**
 * run provides a shortcut to run the app  without needing to install glide
 *
 * gradle run -Papp=../samples/blog -Pout=../samples/out
 *
 * run the default sample app if no app is provided
 */
run {
    def argsList = []

    argsList << ["-a", getPathFromProperty("app", "${project.rootProject.projectDir.path}/sandbox")]
    argsList << ["-t", getPathFromProperty("template", "${project.rootProject.projectDir.path}/base-templates/gae-base-web")]
    argsList << ["-o", getPathFromProperty("out", "${project.buildDir.path}/generated/sandbox")]

    if (project.hasProperty("gae")){ argsList << ["-g", project.getProperty("gae")] }
    if (project.hasProperty("port")){ argsList << ["-p", project.getProperty("port")] }
    if (project.hasProperty("help")){ argsList << "-h" }
    if (project.hasProperty("quiet")){ argsList << "-q" }

    args argsList.flatten()
}


applicationDistribution.from("${project.rootProject.projectDir.path}/base-templates") {
    into "templates"
}

installApp {
    dependsOn ":runner:build"
    dependsOn ":filters:publishToMavenLocal"

    def install_location = getPathFromProperty("dir", project.rootProject.projectDir.path + "/install")
    into install_location

    doLast {
        println """Installation Complete

        ===================================================================
        Important: Add the following path to your PATH environment variable
        '$install_location'
        ===================================================================
        """
    }
}

distZip {
    dependsOn ":runner:build"
}

startScripts {
    applicationName = "glide"       // this will be the name of script that is generated

    // TODO to check if this works on windows
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile    = file getUnixScript()
        //  windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\lib\config', '%APP_HOME%\config')
        unixScriptFile.text    = unixScriptFile.text.replace('APP_HOME="`pwd -P`"', 'APP_HOME="`pwd -P`"\nexport GLIDE_HOME=$APP_HOME')
        if (!unixScriptFile.text.contains("export GLIDE_HOME")) {
            println "GLIDE_HOME is not set. This may lead to improper installation"
        }
    }
}

processResources {
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            build_at: new Date().dateTimeString,
            version: project.version
    ]
}

/**
 * extracts path from system properties and if no path given, uses default value
 *
 * use absolute path or path relative to current working dir
 *
 * WARNING: gradle installTo -Pdir=~/.glide may or may not work.
 *
 * @returns a file object
 */
def getPathFromProperty(prop_name, default_value){
    if (project.hasProperty(prop_name) ) {
        String dir = project.property(prop_name)

        String user_home = System.getProperty("user.home");
        if (dir.startsWith("~") && file(user_home).isDirectory())
            dir = dir.replaceFirst("~",user_home)

        return file(dir)
    }
    return file(default_value)
}
