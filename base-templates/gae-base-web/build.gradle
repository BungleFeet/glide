apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'gaelyk'
apply plugin: 'idea'

appengine {
    disableUpdateCheck = true
    appcfg {
        oauth2 = true
    }
}

if (new File(projectDir, "glide.gradle").exists()) {
    apply from: 'glide.gradle'
}

def templateJavaVersion = 1.7
def templateGroovyVersion = '2.2.2'
def templateGaeVersion = '1.9.1'
def templateGaelykVersion = '2.1'
def templateVersion = '0.1'
def templateGradleVersion = "1.11"

sourceCompatibility = templateJavaVersion
targetCompatibility = templateJavaVersion

webAppDirName = "app"
sourceSets {
    main.groovy.srcDir 'src'
    test.groovy.srcDir 'test'
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        // TODO: remove before release
        mavenLocal()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-gaelyk-plugin:0.6'
    }
}

import static com.google.appengine.task.AbstractTask.*
build.doFirst {
    // TODO feels little hacky, but there is not way around right now !
    def appEngineHomeEnvVariable = System.getenv(APPENGINE_HOME_ENV_PROP_KEY)
    def appEngineSdkRoot = System.getProperty(APPENGINE_SDK_ROOT_SYS_PROP_KEY)

    println "using sdk: ${appEngineHomeEnvVariable?:appEngineSdkRoot}"
    new File(projectDir, ".sdk-root").text = appEngineHomeEnvVariable?:appEngineSdkRoot
}

repositories {
    maven { url 'http://dl.bintray.com/gaelyk/groovy-patches' }
    mavenCentral()
    jcenter()

    // https://oss.sonatype.org/content/repositories/snapshots/org/gaelyk/gaelyk/2.1-SNAPSHOT/
    // http://snapshots.repository.codehaus.org/org/codehaus/groovy/groovy-all/2.1.10-SNAPSHOT/
    maven { url 'http://snapshots.repository.codehaus.org/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

    // TODO: remove before release
    mavenLocal()
}

dependencies {
    compile 'javax.servlet:servlet-api:2.5'
    // workaround for gae/groovy issue
    // https://jira.codehaus.org/browse/GROOVY-6405
    //  https://jira.codehaus.org/browse/GROOVY-6471
    compile "org.codehaus.groovy:groovy-all:2.1.10-SNAPSHOT", {force=true}
//    compile "org.codehaus.groovy:groovy-all:${templateGroovyVersion}"

    compile "com.google.appengine:appengine-api-1.0-sdk:$templateGaeVersion",
            "com.google.appengine:appengine-api-labs:$templateGaeVersion"
    compile "org.gaelyk:gaelyk:$templateGaelykVersion"
    compile 'org.sitemesh:sitemesh:3.0-alpha-2'


    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'junit:junit:4.10'
    testCompile "com.google.appengine:appengine-api-stubs:$templateGaeVersion",
            "com.google.appengine:appengine-testing:$templateGaeVersion"

    appengineSdk "com.google.appengine:appengine-java-sdk:$templateGaeVersion"
}

task tempalteVersion << {
    println "$templateVersion"
}

task wrapper(type: Wrapper) {
    gradleVersion = templateGradleVersion
}


//>
// TODO: remove following lines after export
gaelykSynchronizeResources.enabled = false

test {
    System.out.println "\nTesting Glide Application"

    def ident = '  '

    beforeSuite {
        if (!it.className) return
        System.out.println "${ ident * countParents(it) }$it.name"
    }
    beforeTest {
        System.out.print "${ ident * countParents(it) }$it.name "
    }
    afterTest { descriptor, result ->
        if (result.exception) {
            System.out.println "\u001B[31m" + result.resultType + "\u001B[0m"
            System.out.println( (ident * (countParents(descriptor) + 1)) + result.exception.toString().replace('\n', '\n' +  (ident * (countParents(descriptor) + 1))))
        } else {
            System.out.println "\u001B[32m" + result.resultType + "\u001B[0m"
        }
    }
    afterSuite { descriptor, result ->
        if (descriptor.toString() != 'tests') return
        if (result.failedTestCount > 0) {
            System.out.println ("\n\u001B[31m $result.failedTestCount/$result.testCount TESTS FAILED \u001B[0m\n")
        } else {
            System.out.println ("\n\u001B[32m ALL TESTS PASSSED\u001B[0m\n")
        }
    }
}
test.dependsOn cleanTest



def countParents(testDescriptor) {
    if (!testDescriptor.parent || !testDescriptor.className) return 0
    countParents(testDescriptor.parent) + 1
}
//<